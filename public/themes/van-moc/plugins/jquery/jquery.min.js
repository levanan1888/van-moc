/* jQuery - Basic version */
(function(global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.jQuery = global.$ = {}));
})(this, (function(exports) {
  'use strict';

  // Basic jQuery functionality
  var jQuery = function(selector) {
    if (typeof selector === 'string') {
      return document.querySelectorAll(selector);
    } else if (selector instanceof Element) {
      return [selector];
    } else if (selector instanceof NodeList) {
      return Array.from(selector);
    }
    return [];
  };

  // Add basic methods
  jQuery.fn = jQuery.prototype = {
    each: function(callback) {
      for (var i = 0; i < this.length; i++) {
        callback.call(this[i], i, this[i]);
      }
      return this;
    },
    
    addClass: function(className) {
      this.each(function() {
        this.classList.add(className);
      });
      return this;
    },
    
    removeClass: function(className) {
      this.each(function() {
        this.classList.remove(className);
      });
      return this;
    },
    
    toggleClass: function(className) {
      this.each(function() {
        this.classList.toggle(className);
      });
      return this;
    },
    
    on: function(event, handler) {
      this.each(function() {
        this.addEventListener(event, handler);
      });
      return this;
    },
    
    off: function(event, handler) {
      this.each(function() {
        this.removeEventListener(event, handler);
      });
      return this;
    },
    
    html: function(content) {
      if (content === undefined) {
        return this[0] ? this[0].innerHTML : '';
      }
      this.each(function() {
        this.innerHTML = content;
      });
      return this;
    },
    
    text: function(content) {
      if (content === undefined) {
        return this[0] ? this[0].textContent : '';
      }
      this.each(function() {
        this.textContent = content;
      });
      return this;
    },
    
    val: function(value) {
      if (value === undefined) {
        return this[0] ? this[0].value : '';
      }
      this.each(function() {
        this.value = value;
      });
      return this;
    },
    
    show: function() {
      this.each(function() {
        this.style.display = '';
      });
      return this;
    },
    
    hide: function() {
      this.each(function() {
        this.style.display = 'none';
      });
      return this;
    },
    
    fadeIn: function(duration) {
      duration = duration || 400;
      this.each(function() {
        this.style.opacity = '0';
        this.style.display = '';
        var start = Date.now();
        var animate = function() {
          var elapsed = Date.now() - start;
          var progress = elapsed / duration;
          if (progress < 1) {
            this.style.opacity = progress;
            requestAnimationFrame(animate.bind(this));
          } else {
            this.style.opacity = '1';
          }
        }.bind(this);
        animate();
      });
      return this;
    },
    
    fadeOut: function(duration) {
      duration = duration || 400;
      this.each(function() {
        var start = Date.now();
        var animate = function() {
          var elapsed = Date.now() - start;
          var progress = elapsed / duration;
          if (progress < 1) {
            this.style.opacity = 1 - progress;
            requestAnimationFrame(animate.bind(this));
          } else {
            this.style.display = 'none';
            this.style.opacity = '0';
          }
        }.bind(this);
        animate();
      });
      return this;
    }
  };

  // Static methods
  jQuery.ajax = function(options) {
    var xhr = new XMLHttpRequest();
    xhr.open(options.method || 'GET', options.url, true);
    
    if (options.headers) {
      Object.keys(options.headers).forEach(function(key) {
        xhr.setRequestHeader(key, options.headers[key]);
      });
    }
    
    xhr.onreadystatechange = function() {
      if (xhr.readyState === 4) {
        if (xhr.status >= 200 && xhr.status < 300) {
          if (options.success) {
            options.success(xhr.responseText, xhr.status, xhr);
          }
        } else {
          if (options.error) {
            options.error(xhr, xhr.status, xhr.statusText);
          }
        }
      }
    };
    
    xhr.send(options.data);
  };

  jQuery.ready = function(callback) {
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', callback);
    } else {
      callback();
    }
  };

  // Export for use
  if (typeof window !== 'undefined') {
    window.jQuery = window.$ = jQuery;
  }
  
  exports.jQuery = jQuery;
})); 